// This file is generated by zbuild. Do not edit manually.

const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const dep_blst = b.dependency("blst", .{
        .optimize = optimize,
        .target = target,
    });

    const dep_hashtree = b.dependency("hashtree", .{
        .optimize = optimize,
        .target = target,
    });

    const dep_leveldb = b.dependency("leveldb", .{
        .optimize = optimize,
        .target = target,
    });

    const dep_lmdb = b.dependency("lmdb", .{
        .optimize = optimize,
        .target = target,
    });

    const dep_snappy = b.dependency("snappy", .{
        .optimize = optimize,
        .target = target,
    });

    const dep_ssz = b.dependency("ssz", .{
        .optimize = optimize,
        .target = target,
    });

    const dep_state_transition = b.dependency("state_transition", .{
        .optimize = optimize,
        .target = target,
    });

    const module_lodestar_z_bun = b.createModule(.{
        .root_source_file = b.path("zig/root.zig"),
        .target = target,
        .optimize = optimize,
        .pic = true,
    });
    b.modules.put(b.dupe("lodestar_z_bun"), module_lodestar_z_bun) catch @panic("OOM");

    const lib_lodestar_z_bun = b.addLibrary(.{
        .name = "lodestar_z_bun",
        .root_module = module_lodestar_z_bun,
        .linkage = .dynamic,
    });

    const install_lib_lodestar_z_bun = b.addInstallArtifact(lib_lodestar_z_bun, .{});

    const tls_install_lib_lodestar_z_bun = b.step("build-lib:lodestar_z_bun", "Install the lodestar_z_bun library");
    tls_install_lib_lodestar_z_bun.dependOn(&install_lib_lodestar_z_bun.step);
    b.getInstallStep().dependOn(&install_lib_lodestar_z_bun.step);

    const tls_run_test = b.step("test", "Run all tests");

    const test_lodestar_z_bun = b.addTest(.{
        .name = "lodestar_z_bun",
        .root_module = module_lodestar_z_bun,
        .filters = b.option([][]const u8, "lodestar_z_bun.filters", "lodestar_z_bun test filters") orelse &[_][]const u8{},
    });
    const install_test_lodestar_z_bun = b.addInstallArtifact(test_lodestar_z_bun, .{});
    const tls_install_test_lodestar_z_bun = b.step("build-test:lodestar_z_bun", "Install the lodestar_z_bun test");
    tls_install_test_lodestar_z_bun.dependOn(&install_test_lodestar_z_bun.step);

    const run_test_lodestar_z_bun = b.addRunArtifact(test_lodestar_z_bun);
    const tls_run_test_lodestar_z_bun = b.step("test:lodestar_z_bun", "Run the lodestar_z_bun test");
    tls_run_test_lodestar_z_bun.dependOn(&run_test_lodestar_z_bun.step);
    tls_run_test.dependOn(&run_test_lodestar_z_bun.step);

    module_lodestar_z_bun.addImport("hashtree", dep_hashtree.module("hashtree"));
    module_lodestar_z_bun.addImport("lmdb", dep_lmdb.module("lmdb"));
    module_lodestar_z_bun.addImport("leveldb", dep_leveldb.module("leveldb"));
    module_lodestar_z_bun.addImport("snappy", dep_snappy.module("snappy"));
    module_lodestar_z_bun.addImport("state_transition", dep_state_transition.module("state_transition"));
    module_lodestar_z_bun.addImport("blst", dep_blst.module("blst"));
    module_lodestar_z_bun.addImport("ssz:persistent_merkle_tree", dep_ssz.module("persistent_merkle_tree"));
}
