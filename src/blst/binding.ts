// This file is auto-generated by @chainsafe/bun-ffi-z. Do not edit.

import path from "node:path";
import {openLibrary} from "@chainsafe/bun-ffi-z";

const fns = {
	secretKeyFromBytes: {
		args: ["ptr", "ptr", "u32"],
		returns: "u32",
	},
	secretKeyToBytes: {
		args: ["ptr", "ptr"],
		returns: "void",
	},
	secretKeyKeyGen: {
		args: ["ptr", "ptr", "u32"],
		returns: "u32",
	},
	secretKeyKeyGenV3: {
		args: ["ptr", "ptr", "u32"],
		returns: "u32",
	},
	secretKeyKeyGenV45: {
		args: ["ptr", "ptr", "u32", "ptr", "u32"],
		returns: "u32",
	},
	secretKeyDeriveMasterEip2333: {
		args: ["ptr", "ptr", "u32"],
		returns: "u32",
	},
	secretKeyDeriveChildEip2333: {
		args: ["ptr", "ptr", "u32"],
		returns: "u32",
	},
	secretKeyToPublicKey: {
		args: ["ptr", "ptr"],
		returns: "void",
	},
	secretKeySign: {
		args: ["ptr", "ptr", "ptr", "u32"],
		returns: "u32",
	},
	publicKeyFromBytes: {
		args: ["ptr", "ptr", "u32"],
		returns: "u32",
	},
	publicKeyToBytes: {
		args: ["ptr", "ptr"],
		returns: "void",
	},
	publicKeyValidate: {
		args: ["ptr"],
		returns: "u32",
	},
	aggregateWithRandomness: {
		args: ["ptr", "ptr", "u32", "ptr", "ptr", "bool", "bool"],
		returns: "u32",
	},
	publicKeyAggregateWithRandomness: {
		args: ["ptr", "ptr", "u32", "bool"],
		returns: "u32",
	},
	publicKeyAggregate: {
		args: ["ptr", "ptr", "u32", "bool"],
		returns: "u32",
	},
	signatureFromBytes: {
		args: ["ptr", "ptr", "u32"],
		returns: "u32",
	},
	signatureToBytes: {
		args: ["ptr", "ptr"],
		returns: "void",
	},
	signatureValidate: {
		args: ["ptr", "bool"],
		returns: "u32",
	},
	signatureVerify: {
		args: ["ptr", "bool", "ptr", "u32", "ptr", "bool"],
		returns: "u32",
	},
	signatureAggregateVerify: {
		args: ["ptr", "bool", "ptr", "ptr", "u32", "bool"],
		returns: "u32",
	},
	signatureFastAggregateVerify: {
		args: ["ptr", "bool", "ptr", "ptr", "u32"],
		returns: "u32",
	},
	signatureVerifyMultipleAggregateSignatures: {
		args: ["u32", "ptr", "ptr", "bool", "ptr", "bool"],
		returns: "u32",
	},
	signatureAggregateWithRandomness: {
		args: ["ptr", "ptr", "u32", "bool"],
		returns: "u32",
	},
	signatureAggregate: {
		args: ["ptr", "ptr", "u32", "bool"],
		returns: "u32",
	},
} as const;
const lib = await openLibrary(path.join(import.meta.dirname, ".."), fns);

export const binding = lib.symbols;
export const close = lib.close;
